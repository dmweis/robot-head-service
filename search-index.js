var searchIndex = new Map(JSON.parse('[\
["robot_head_service",{"doc":"","t":"FFONNNNNNNNNNNNONNNNNNNNNNHONNNNNNNNNNO","n":["Args","RobotHeadCommand","active","as_node","as_node","as_node_mut","as_node_mut","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command_for_update","config","default","deserialize","fmt","from","from","from_arg_matches","from_arg_matches_mut","group_id","into","into","main","pitch","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","yaw"],"q":[[0,"robot_head_service"],[39,"clap_builder::builder::command"],[40,"core::result"],[41,"serde::de"],[42,"core::fmt"],[43,"core::fmt"],[44,"clap_builder"],[45,"clap_builder::util::id"],[46,"core::option"],[47,"anyhow"],[48,"core::any"]],"d":["","","head is lifted in active mode","","","","","","","","","","","","","Config path","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","angle at which we are looking 0.0 is flat horizon","","","","","","","","","","","direction in which we are looking center is 0.0"],"i":[0,0,2,5,2,5,2,5,5,5,2,5,2,5,5,5,2,2,5,5,2,5,5,5,5,2,0,2,5,2,5,2,5,2,5,5,5,2,2],"f":"```{ce{}{}}000{bb}01111{{}b}0`{{}d}{c{{f{d}}}h}{{jl}n}{cc{}}0{A`{{f{jAb}}}}0{{}{{Af{Ad}}}}88{{}{{Aj{Ah}}}}`{c{{f{e}}}{}{}}000{cAl{}}0{{jA`}{{f{AhAb}}}}0<<`","c":[],"p":[[5,"Command",39],[5,"RobotHeadCommand",0],[6,"Result",40],[10,"Deserializer",41],[5,"Args",0],[5,"Formatter",42],[8,"Result",42],[5,"ArgMatches",43],[8,"Error",44],[5,"Id",45],[6,"Option",46],[1,"unit"],[8,"Result",47],[5,"TypeId",48]],"b":[]}],\
["servo_test",{"doc":"","t":"FNNNNNNNNONNNNNNHONNNNNN","n":["Args","as_node","as_node_mut","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","config","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","main","port","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"servo_test"],[24,"clap_builder::builder::command"],[25,"core::fmt"],[26,"core::fmt"],[27,"clap_builder"],[28,"core::result"],[29,"clap_builder::util::id"],[30,"core::option"],[31,"anyhow"],[32,"core::any"]],"d":["","","","","","","","","","Config path","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Serial port","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2],"f":"`{ce{}{}}0{bb}011{{}b}0`{{df}h}{cc{}}{j{{n{dl}}}}0{{}{{Ab{A`}}}}6{{}{{Af{Ad}}}}`{c{{n{e}}}{}{}}0{cAh{}}{{dj}{{n{Adl}}}}0:","c":[],"p":[[5,"Command",24],[5,"Args",0],[5,"Formatter",25],[8,"Result",25],[5,"ArgMatches",26],[8,"Error",27],[6,"Result",28],[5,"Id",29],[6,"Option",30],[1,"unit"],[8,"Result",31],[5,"TypeId",32]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
